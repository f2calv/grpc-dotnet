//https://grpc.io/docs/guides/concepts/
//https://developers.google.com/protocol-buffers/docs/csharptutorial

syntax = "proto3";

import "another.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "CasCap.Services";

package Greet;

// The greeting service definition.
service Greeter {
  
  // Unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
  rpc SayHello (HelloRequest) returns (HelloResponse);

  rpc GetFullResponse (google.protobuf.Empty) returns (FullResponse);

  //Server streaming RPCs where the client sends a request to the server and gets a stream to read a sequence of messages back.
  //The client reads from the returned stream until there are no more messages. gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);

  //Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream.
  //Once the client has finished writing the messages, it waits for the server to read them and return its response.
  //Again gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);

  //Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream.
  //The two streams operate independently, so clients and servers can read and write in whatever order they like:
  //for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message,
  //or some other combination of reads and writes. The order of messages in each stream is preserved.
  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
  
  rpc SomeVoidOperation (google.protobuf.Empty) returns (google.protobuf.Empty);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloResponse {
  string message = 1;
}

//https://developers.google.com/protocol-buffers/docs/proto3
message FullResponse {
//Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field's type
//(you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through 2047 take two bytes.
//So you should reserve the numbers 1 through 15 for very frequently occurring message elements.
//Remember to leave some room for frequently occurring elements that might be added in the future.
  string strz = 1;
  reserved 3, 4, 5;
  reserved "foo", "bar";
  int32 id = 6;
  google.protobuf.Timestamp start = 7;
  double isDouble = 8;
  float isFloat = 9;
  //Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.
  int32 isInt32 = 10;
  //Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.
  int64 isInt64 = 11;
  //Uses variable-length encoding.
  uint32 isUInt32 = 12;
  //Uses variable-length encoding.
  uint64 isUInt64 = 13;
  //Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.
  sint32 isSInt32 = 14;
  //Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.
  sint64 isSInt64 = 15;
  //Always four bytes. More efficient than uint32 if values are often greater than 228.
  fixed32 isFixed32 = 16;
  //Always eight bytes. More efficient than uint64 if values are often greater than 256.
  fixed64 isFixed64 = 17;
  //Always four bytes.
  sfixed32 sisFixed32 = 18;
  //Always four bytes.
  sfixed64 sisFixed64 = 19;
  bool isBool = 20;
  //A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 232.
  bool isString = 21;
  //May contain any arbitrary sequence of bytes no longer than 232.
  bytes isBytes = 22;
  NestedObject someObject = 23;
}

// The response message containing the greetings.
message NestedObject {
  string message = 1;
  enum Colour {
    //There must be a zero value, so that we can use 0 as a numeric default value.
    COLOUR_UNSPECIFIED = 0;
    COLOUR_WHITE = 1;
    COLOUR_BLACK = 2;
    COLOUR_ORANGE = 3;
  }
  Colour colour = 2;
  AnotherObject obj = 3;
  repeated AnotherObject objects = 4;
}